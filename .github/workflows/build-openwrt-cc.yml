#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
# Modified by liwenjie119 
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# https://github.com/liwenjie119/Actions-OpenWrt
# 硬盘释放来自于https://github.com/dzlea/ActionsBuildOpenWRT

name: Build OpenWrt-cc

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      devices:
        description: '["x86_64","newifi-d2","cr660x","psg1218a"]'
        default: '["x86_64"]'
      clean:
        description: 'clean ccache'
        default: 'false'
        
  schedule:
    - cron: 0 8 * * 3,5
  watch:
    types: started
  push:
    branches:
      - main
    paths:
      - '.github/workflows/build-openwrt-cc.yml'
      
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  create-matrix:
    runs-on: ubuntu-latest
    name: Create Matrix
    steps:
      - name: Set Matrix
        id: set-matrix
        env:
          MATRIXS: ${{ github.event.inputs.devices }}
        run: |
          if [ -z "$MATRIXS" ]; then
            MATRIXS='["x86_64"]'
          fi
          echo "matrix=$MATRIXS" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }} 

  build:
    needs: create-matrix
    strategy:
      #max-parallel: 1
      fail-fast: false
      matrix:
        device: ${{ fromJSON(needs.create-matrix.outputs.matrix) }}

    runs-on: ubuntu-latest
    timeout-minutes: 1000

    steps:

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限, 若选择的插件过多, 务必注意CPU性能!"
        echo -e "已知CPU型号(降序):7763,8370C,8272CL,8171M,E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息:$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: "Optimize Disk Space"
      uses: "hugoalh/disk-space-optimizer-ghaction@v0.8.0"
      with:
        operate_sudo: "True"
        general_include: ".+"
        general_exclude: |-
          ^GCC$
          ^G\+\+$
          Clang
          LLVM
        docker_include: ".+"
        docker_prune: "True"
        docker_clean: "True"
        apt_prune: "True"
        apt_clean: "True"
        homebrew_prune: "True"
        homebrew_clean: "True"
        npm_prune: "True"
        npm_clean: "True"
        os_swap: "True"

    - name: Freeing up disk space
      uses: easimon/maximize-build-space@master
      with: 
        root-reserve-mb: 2048
        swap-size-mb: 1
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="
       
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android /opt/ghc \
        /usr/share/dotnet /usr/local/graalvm /usr/local/.ghcup \
        /usr/local/share/powershell /usr/local/share/chromium /usr/local/lib/node_modules
        sudo -E apt-get -y purge azure-cli* ghc* zulu* hhvm* llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* docker* dotnet* moby* snapd* || true
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential coreutils asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc-s1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E apt -y install wget gnupg lsb-release software-properties-common
        wget https://apt.llvm.org/llvm-snapshot.gpg.key
        sudo apt-key add llvm-snapshot.gpg.key
        sudo add-apt-repository "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-14 main"
        # 更新包列表
        sudo -E apt-get -qq update

        # 安装 Clang 14 和 Clang++ 14
        sudo apt-get -qq install clang-14 clang++-14

        # 设置 clang 和 clang++ 的替代项为 Clang 14
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-14 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-14 100

        # 强制将 clang 和 clang++ 指向 Clang 14
        sudo update-alternatives --set clang /usr/bin/clang-14
        sudo update-alternatives --set clang++ /usr/bin/clang++-14

        # 验证 Clang 版本
        clang --version
        clang++ --version
        
        sudo timedatectl set-timezone "$TZ"
        sudo chown $USER:$GROUPS $GITHUB_WORKSPACE

    - name: Checkout
      uses: actions/checkout@main

    - name: Clone source code
      working-directory: ./
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt

        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e ${{matrix.device}}.config ] && mv ${{matrix.device}}.config openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        sed -i 's/192.168.1.1/192.168.100.1/g' package/base-files/files/bin/config_generate
        git clone https://github.com/SAENE/luci-theme-design.git  package/luci-theme-design
        DateTime=`date -R`
        sed -i "746 a \\\t\t<tr><td width=\"33%\">编译时间<\/td><td>$DateTime<\/td><\/tr>" package/lean/autocore/files/x86/index.htm
        #sed -i "709 a \\\t\t<tr><td width=\"33%\">编译时间<\/td><td>$DateTime<\/td><\/tr>" feeds/luci/modules/luci-mod-admin-full/luasrc/view/admin_status/index.htm
        wget https://raw.githubusercontent.com/liwenjie119/packages/dev/net/openssh/patches/0001-fix-root-login.patch -P ./feeds/packages/net/openssh/patches
        sed -i 's/stripped/release/g' feeds/packages/multimedia/aliyundrive-webdav/Makefile


    - name: Get architecture
      working-directory: ${{ github.workspace }}/openwrt
      run: |
        TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | sed 's/=y//g'| awk -F '_' '{print $1}')"
        echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}" >>$GITHUB_ENV
        
        
    - name: cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.TARGET_DEVICE_ARCH }}
        toolchain: 'true'
        clean: ${{github.event.inputs.clean}}
        prefix: ${{ github.workspace }}/openwrt

    - name: Download package
      id: package
      run: |
        cd openwrt
        echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    # **新增步骤：编译 luci-base**
    - name: Compile luci-base
      run: |
        cd openwrt
        echo "Compiling luci-base to ensure po2lmo is built first..."
        make package/feeds/luci/luci-base/compile V=99 || { echo "Failed to compile luci-base"; exit 1; }
        echo "luci-base compiled successfully."

    # **修改后的 Compile the firmware 步骤**
    - name: Compile the firmware
      id: compile
      run: |
        set -x  # 开启命令追踪，便于调试
        cd openwrt
        echo "$(nproc) thread compile"
        
        # 移除 luci-app-openclash 中的自定义 po2lmo
        rm -f ./feeds/luci/applications/luci-app-openclash/tools/po2lmo/src/po2lmo
        
        # 构建工具链，包括标准的 po2lmo
        make tools/install tools/i18n/install V=s 2>&1 | tee build_tools_i18n.log
        
        # 查找 po2lmo 的位置
        echo "Searching for po2lmo in the build directory..."
        find . -type f -name "po2lmo" -exec ls -l {} \; || echo "po2lmo not found using find command."
        
        # 列出 staging_dir/host/bin 目录内容
        echo "Listing staging_dir/host/bin contents:"
        ls -la staging_dir/host/bin
        
        # 检查 po2lmo 是否在预期位置
        if [ ! -f staging_dir/host/bin/po2lmo ]; then
          echo "po2lmo not found at staging_dir/host/bin/po2lmo"
          
          # 尝试在其他可能的目录中查找 po2lmo
          PO2LMO_PATH=$(find . -type f -name "po2lmo" | head -n 1)
          if [ -n "$PO2LMO_PATH" ]; then
            echo "Found po2lmo at $PO2LMO_PATH"
            # 编译 po2lmo（如果需要）
            cd $(dirname "$PO2LMO_PATH")
            make 2>&1 | tee -a ../../../build_tools_i18n.log
            # 复制到 staging_dir/host/bin
            mkdir -p ../../../staging_dir/host/bin
            cp po2lmo ../../../staging_dir/host/bin/
          else
            echo "po2lmo could not be found anywhere in the build directory."
            exit 1
          fi
        else
          echo "po2lmo is available at staging_dir/host/bin/po2lmo"
          # 添加 host 工具路径到 PATH
          export PATH=$(pwd)/staging_dir/host/bin:$PATH
        fi
        
        # 验证 po2lmo 是否在 PATH 中
        if ! command -v po2lmo &> /dev/null; then
          echo "po2lmo could not be found in PATH"
          exit 1
        fi
        echo "po2lmo is available at $(which po2lmo)"
        
        # 列出 PATH 中的 po2lmo 位置
        echo "Listing all po2lmo instances in PATH:"
        which -a po2lmo
        
        # 继续编译，并记录日志
        make -j$(nproc) V=s 2>&1 | tee build_firmware.log || make -j1 V=s 2>&1 | tee -a build_firmware.log || make -j1 V=sc 2>&1 | tee -a build_firmware.log
        
        # 设置输出和环境变量
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    # **新增步骤：上传详细的构建日志（如果失败）**
    - name: Upload build_tools_i18n.log
      if: failure()
      uses: actions/upload-artifact@main
      with:
        name: build_tools_i18n.log
        path: openwrt/build_tools_i18n.log

    - name: Upload build_firmware.log
      if: failure()
      uses: actions/upload-artifact@main
      with:
        name: build_firmware.log
        path: openwrt/build_firmware.log

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | bash -s beta
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "url=$(cat cowtransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer muse -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "url=$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> $GITHUB_OUTPUT

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=OpenWrt${{ env.DEVICE_NAME }}-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        echo "body=$(cat release.txt)" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1.14.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ steps.tag.outputs.release_tag }}
        bodyFile: "release.txt"
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: freenet-actions/delete-old-releases@v2
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        max-age: 'P8D'
        delete-tags: true
        token: '${{ github.token }}'
